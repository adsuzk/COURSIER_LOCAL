
package com.suzosky.coursier

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.view.WindowCompat
import androidx.core.content.ContextCompat
import androidx.core.content.edit
import androidx.core.net.toUri
import androidx.lifecycle.lifecycleScope
import com.suzosky.coursier.data.models.Commande
import com.suzosky.coursier.data.models.SystemHealth
import com.suzosky.coursier.data.models.HealthStatus
import com.suzosky.coursier.network.ApiService
import com.suzosky.coursier.services.AutoUpdateService
import com.suzosky.coursier.services.OrderRingService
import com.suzosky.coursier.services.VoiceGuidanceService
import com.suzosky.coursier.telemetry.TelemetrySDK
import com.suzosky.coursier.telemetry.UpdateInfo
import com.suzosky.coursier.ui.components.PaymentStatusDialog
import com.suzosky.coursier.ui.components.PaymentWebViewDialog
import com.suzosky.coursier.ui.components.WaitingForOrdersScreen
import com.suzosky.coursier.ui.screens.CoursierScreenNew
import com.suzosky.coursier.ui.screens.LoginScreen
import com.suzosky.coursier.ui.theme.SuzoskyTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.Call
import okhttp3.Callback
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import java.io.IOException
import dagger.hilt.android.AndroidEntryPoint
import com.google.firebase.messaging.FirebaseMessaging
import android.content.BroadcastReceiver
import android.content.Context
import android.content.IntentFilter
import androidx.localbroadcastmanager.content.LocalBroadcastManager
import com.suzosky.coursier.messaging.FCMService

// Fonction utilitaire pour d√©sactiver le token FCM c√¥t√© serveur
fun deactivateFcmTokenOnServer(context: android.content.Context) {
    val prefs = context.getSharedPreferences("suzosky_prefs", android.content.Context.MODE_PRIVATE)
    val token = prefs.getString("fcm_token", null)
    if (token.isNullOrBlank()) return

    // Use ApiService helper which provides fallback and queuing behavior
    ApiService.deactivateDeviceToken(context, token, reEnqueueOnFailure = true, onSuccess = {
        Log.d("Logout", "‚úÖ Token d√©sactiv√© c√¥t√© serveur via ApiService")
        println("‚úÖ Token d√©sactiv√© c√¥t√© serveur via ApiService")
        try { prefs.edit { remove("fcm_token") } } catch (_: Exception) {}
    }, onFailure = { err ->
        Log.w("Logout", "üö® √âchec d√©sactivation token via ApiService: $err")
        println("üö® √âchec d√©sactivation token via ApiService: $err")
        // Make failure visible to user with a short Toast and a persistent log entry
        try {
            android.os.Handler(android.os.Looper.getMainLooper()).post {
                android.widget.Toast.makeText(context, "√âchec d√©sactivation token: $err", android.widget.Toast.LENGTH_LONG).show()
            }
        } catch (_: Exception) {}
    })
}
@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    // üîä Service de guidage vocal
    internal var voiceGuidance: VoiceGuidanceService? = null
    
    // BroadcastReceiver pour les nouvelles commandes
    private var commandeReceiver: BroadcastReceiver? = null
    
    // ü©∫ Variables de monitoring syst√®me - initialis√©es √† 0 pour forcer la premi√®re sync
    internal var lastSyncTimestamp = 0L
    internal var lastDatabaseCheck = false
    internal var lastFcmTokenCheck = false
    internal var lastSyncCheck = false
    
    // ü©∫ Fonction pour calculer la sant√© du syst√®me
    internal fun calculateSystemHealth(prefs: android.content.SharedPreferences, hasRecentData: Boolean): SystemHealth {
        val now = System.currentTimeMillis()
        val timeSinceLastSync = (now - lastSyncTimestamp) / 1000
        
        // V√©rifier la base de donn√©es (si on a re√ßu des donn√©es r√©cemment)
        val databaseConnected = hasRecentData && timeSinceLastSync < 30
        lastDatabaseCheck = databaseConnected
        
        // V√©rifier le token FCM
        val fcmToken = prefs.getString("fcm_token", null)
        val fcmTokenActive = !fcmToken.isNullOrBlank()
        lastFcmTokenCheck = fcmTokenActive
        
        // V√©rifier la synchronisation (max 10s pour √™tre consid√©r√© comme OK)
        val syncWorking = timeSinceLastSync < 10
        lastSyncCheck = syncWorking
        
        // Calculer le statut global
        val status = when {
            !databaseConnected -> HealthStatus.CRITICAL
            !fcmTokenActive -> HealthStatus.CRITICAL
            !syncWorking -> HealthStatus.WARNING
            else -> HealthStatus.HEALTHY
        }
        
        // G√©n√©rer le message d'erreur si n√©cessaire
        val message = when {
            !databaseConnected -> "‚ùå Connexion √† la base de donn√©es perdue"
            !fcmTokenActive -> "‚ùå Token FCM invalide ou expir√©"
            !syncWorking -> "‚ö†Ô∏è Synchronisation lente (${timeSinceLastSync}s)"
            else -> "‚úÖ Tous les syst√®mes op√©rationnels"
        }
        
        return SystemHealth(
            status = status,
            databaseConnected = databaseConnected,
            fcmTokenActive = fcmTokenActive,
            syncWorking = syncWorking,
            lastSyncTimestamp = lastSyncTimestamp,
            message = message
        )
    }
    
    // ÔøΩüó∫Ô∏è Fonction pour lancer Google Maps avec itin√©raire
    fun launchGoogleMaps(depart: String, arrivee: String) {
        try {
            val uri = Uri.parse("https://www.google.com/maps/dir/?api=1&origin=${Uri.encode(depart)}&destination=${Uri.encode(arrivee)}&travelmode=driving")
            val intent = Intent(Intent.ACTION_VIEW, uri)
            intent.setPackage("com.google.android.apps.maps")
            startActivity(intent)
            Log.d("MainActivity", "üó∫Ô∏è Google Maps lanc√©: $depart ‚Üí $arrivee")
        } catch (e: Exception) {
            // Fallback: navigateur web
            try {
                val webUri = Uri.parse("https://www.google.com/maps/dir/?api=1&origin=${Uri.encode(depart)}&destination=${Uri.encode(arrivee)}")
                val webIntent = Intent(Intent.ACTION_VIEW, webUri)
                startActivity(webIntent)
                Log.d("MainActivity", "üåê Maps via navigateur: $depart ‚Üí $arrivee")
            } catch (e2: Exception) {
                Log.e("MainActivity", "‚ùå Impossible de lancer Maps", e2)
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            println("üöÄ MainActivity.onCreate - D√©but de l'initialisation")
            
            // üîä Initialiser le guidage vocal
            voiceGuidance = VoiceGuidanceService(this)
            Log.d("MainActivity", "üîä Service de guidage vocal initialis√©")
            
            // Configuration pour le mode edge-to-edge
            enableEdgeToEdge()
            WindowCompat.setDecorFitsSystemWindows(window, false)
            
            println("‚úÖ Configuration edge-to-edge r√©ussie")
            
            // Initialiser la t√©l√©m√©trie
            val telemetry = TelemetrySDK.initialize(
                context = this,
                baseUrl = try { com.suzosky.coursier.BuildConfig.PROD_BASE } catch (_: Throwable) { "https://coursier.conciergerie-privee-suzosky.com" },
                apiKey = "suzosky_telemetry_2025"
            )
            
            // V√©rifier les mises √† jour
            // Utilise une variable globale pour d√©clencher le dialog dans Compose
            val updateInfoToShow = arrayOfNulls<UpdateInfo>(1)
            lifecycleScope.launch {
                try {
                    val updateInfo = telemetry.checkForUpdates()
                    if (updateInfo?.isMandatory == true) {
                        // D√©clencher l'affichage du dialog dans Compose
                        updateInfoToShow[0] = updateInfo
                    }
                } catch (e: Exception) {
                    println("Erreur v√©rification mises √† jour: ${e.message}")
                }
            }
            // Passe updateInfoToShow √† setContent pour affichage dans Compose
            
            val prefs = getSharedPreferences("suzosky_prefs", MODE_PRIVATE)

            // Demander les permissions essentielles : notifications + localisation
            val permissionsToRequest = mutableListOf<String>()
            
            // Android 13+ : permission notifications
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                    permissionsToRequest.add(android.Manifest.permission.POST_NOTIFICATIONS)
                }
            }
            
            // Permissions de localisation (obligatoires pour les coursiers)
            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(android.Manifest.permission.ACCESS_FINE_LOCATION)
            }
            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(android.Manifest.permission.ACCESS_COARSE_LOCATION)
            }

            // Android 14+ : explicit runtime permission for starting LOCATION foreground services
            if (android.os.Build.VERSION.SDK_INT >= 34) {
                if (ContextCompat.checkSelfPermission(this, "android.permission.FOREGROUND_SERVICE_LOCATION") != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                    permissionsToRequest.add("android.permission.FOREGROUND_SERVICE_LOCATION")
                }
            }
            
            // Demander toutes les permissions manquantes
            if (permissionsToRequest.isNotEmpty()) {
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                    requestPermissions(permissionsToRequest.toTypedArray(), 1001)
                }
            }
            
            // Configuration du BroadcastReceiver pour les nouvelles commandes
            setupCommandeReceiver()
            
            // D√©marrer le service de mise √† jour automatique avec protection Android 14
            val canStartService = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            if (canStartService) {
                // Protection sp√©ciale pour Android 14 (API 34)
                if (android.os.Build.VERSION.SDK_INT >= 34) {
                    // Android 14 : d√©lai avant d√©marrage du service
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        try { 
                            AutoUpdateService.startService(this) 
                            println("üîÑ Service d√©marr√© avec d√©lai (Android 14)")
                        } catch (e: SecurityException) {
                            println("‚ùå Service bloqu√© sur Android 14: ${e.message}")
                        }
                    }, 2000) // D√©lai de 2 secondes
                } else {
                    // Android 13 : d√©marrage normal
                    try { 
                        AutoUpdateService.startService(this) 
                        println("üîÑ Service d√©marr√© normalement (Android 13)")
                    } catch (e: SecurityException) {
                        println("‚ùå Service bloqu√©: ${e.message}")
                    }
                }
            }
            
            println("üîÑ Permissions et services configur√©s")
            
            setContent {
                SuzoskyTheme {
                    SuzoskyCoursierApp(updateInfoToShow)
                }
            }
            // FORCER l'enregistrement FCM d√®s le d√©marrage - VERSION ROBUSTE
            try {
                Log.d("MainActivity", "üî• D√âBUT for√ßage enregistrement FCM au d√©marrage")
                println("üî• D√âBUT for√ßage enregistrement FCM au d√©marrage")
                
                FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        val token = task.result
                        Log.d("MainActivity", "‚úÖ Token FCM r√©cup√©r√©: ${token.substring(0, 20)}...")
                        println("‚úÖ Token FCM r√©cup√©r√©: ${token.substring(0, 20)}...")
                        
                        // Sauvegarder localement
                        prefs.edit().putString("fcm_token", token).apply()
                        
                        val existingId = prefs.getInt("coursier_id", -1)
                        if (existingId > 0) {
                            Log.d("MainActivity", "üöÄ Enregistrement imm√©diat pour coursier $existingId")
                            println("üöÄ Enregistrement imm√©diat pour coursier $existingId")
                            ApiService.registerDeviceToken(this, existingId, token)
                            
                            // ‚ö° PING IMM√âDIAT pour ouvrir le formulaire √† la seconde
                            Log.d("MainActivity", "‚ö° MainActivity: Ping imm√©diat pour ouverture formulaire")
                            println("‚ö° MainActivity: Ping imm√©diat pour ouverture formulaire")
                            ApiService.pingDeviceToken(this, token)
                            
                            // D√©marrer le ForegroundService de tracking si on a un coursier connect√©
                            try {
                                startLocationForegroundService(existingId)
                            } catch (e: Exception) {
                                Log.w("MainActivity", "Impossible de d√©marrer LocationForegroundService: ${e.message}")
                            }
                        } else {
                            Log.d("MainActivity", "‚è∏Ô∏è Token sauv√©, en attente de connexion coursier")
                            println("‚è∏Ô∏è Token sauv√©, en attente de connexion coursier")
                        }
                    } else {
                        Log.w("MainActivity", "‚ùå FCM token fetch failed: ${task.exception?.message}")
                        println("‚ùå FCM token fetch failed: ${task.exception?.message}")
                    }
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "registerDeviceToken startup error", e)
            }

            // Process any pending token deactivations queued from previous offline failures
            try {
                ApiService.processPendingDeactivations(this)
            } catch (e: Exception) {
                Log.w("MainActivity", "Erreur processPendingDeactivations: ${e.message}")
            }
            
            println("‚úÖ Application d√©marr√©e avec succ√®s")
            
        } catch (e: Exception) {
            println("‚ùå CRASH dans MainActivity.onCreate: ${e.message}")
            e.printStackTrace()
            
            // Reporter le crash via t√©l√©m√©trie
            TelemetrySDK.getInstance()?.reportCrash(
                throwable = e,
                screenName = "MainActivity",
                userAction = "App startup"
            )
            
            // Fallback - Interface d'erreur simple
            setContent {
                SuzoskyTheme {
                    ErrorFallbackScreen(error = e.message ?: "Erreur inconnue")
                }
            }
        }
    }

    private fun startLocationForegroundService(coursierId: Int) {
        try {
            val intent = android.content.Intent(this, com.suzosky.coursier.services.LocationForegroundService::class.java)
            intent.action = com.suzosky.coursier.services.LocationForegroundService.ACTION_START
            intent.putExtra(com.suzosky.coursier.services.LocationForegroundService.EXTRA_COURSIER_ID, coursierId)
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                startForegroundService(intent)
            } else {
                startService(intent)
            }
        } catch (e: Exception) {
            Log.w("MainActivity", "startLocationForegroundService failed: ${e.message}")
        }
    }

    private fun stopLocationForegroundService() {
        try {
            val intent = android.content.Intent(this, com.suzosky.coursier.services.LocationForegroundService::class.java)
            intent.action = com.suzosky.coursier.services.LocationForegroundService.ACTION_STOP
            startService(intent)
        } catch (e: Exception) {
            Log.w("MainActivity", "stopLocationForegroundService failed: ${e.message}")
        }
    }
    // Callback de permission notifications (Android 13+)
    @Suppress("DEPRECATION")
    @Deprecated("Use ActivityResultContracts for permissions in new code")
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1001) {
            // V√©rifier quelles permissions ont √©t√© accord√©es
            val notificationGranted = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            val locationGranted = ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == android.content.pm.PackageManager.PERMISSION_GRANTED ||
                                 ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) == android.content.pm.PackageManager.PERMISSION_GRANTED

            val fgsLocationGranted = if (android.os.Build.VERSION.SDK_INT >= 34) {
                ContextCompat.checkSelfPermission(this, "android.permission.FOREGROUND_SERVICE_LOCATION") == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            // D√©marrer le service si les notifications sont accord√©es
            if (notificationGranted) {
                // Protection Android 14 : d√©lai avant d√©marrage
                if (android.os.Build.VERSION.SDK_INT >= 34) {
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        try { 
                            AutoUpdateService.startService(this) 
                            println("üîÑ Service d√©marr√© apr√®s permission (Android 14)")
                        } catch (e: SecurityException) {
                            println("‚ùå Service bloqu√© apr√®s permission: ${e.message}")
                        }
                    }, 2000)
                } else {
                    try { 
                        AutoUpdateService.startService(this) 
                        println("üîÑ Service d√©marr√© apr√®s permission")
                    } catch (e: SecurityException) {
                        println("‚ùå Service bloqu√© apr√®s permission: ${e.message}")
                    }
                }
            }
            
            // Informer l'utilisateur si la localisation n'est pas accord√©e
            // If location + FGS-location were granted and we have a coursier id saved, start the foreground tracking service.
            try {
                val prefs = getSharedPreferences("suzosky_prefs", MODE_PRIVATE)
                val existingId = prefs.getInt("coursier_id", -1)
                if (locationGranted && fgsLocationGranted && existingId > 0) {
                    try {
                        startLocationForegroundService(existingId)
                    } catch (e: Exception) {
                        Log.w("MainActivity", "Failed to start LocationForegroundService after permission grant: ${e.message}")
                    }
                }
            } catch (e: Exception) {
                Log.w("MainActivity", "Error while starting location service post-permission: ${e.message}")
            }

            // TODO: Show Compose snackbar for location permission result
        }
    }

    // Configuration du BroadcastReceiver pour les nouvelles commandes
    private fun setupCommandeReceiver() {
        commandeReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                if (intent?.action == FCMService.ACTION_REFRESH_DATA) {
                    val orderId = intent.getStringExtra(FCMService.EXTRA_ORDER_ID)
                    println("üîî BroadcastReceiver: Nouvelle commande re√ßue - Order ID: $orderId")
                    Log.d("MainActivity", "üîî BroadcastReceiver: Nouvelle commande re√ßue - Order ID: $orderId")
                    
                    // D√©clencher un rafra√Æchissement des donn√©es API
                    lifecycleScope.launch {
                        try {
                            val prefs = getSharedPreferences("suzosky_prefs", MODE_PRIVATE)
                            val coursierId = prefs.getInt("coursier_id", -1)
                            if (coursierId > 0) {
                                println("üîÑ Rafra√Æchissement des commandes depuis l'API...")
                                
                                // Appeler l'API pour r√©cup√©rer les nouvelles commandes
                                ApiService.getCoursierDetails(coursierId) { data, error ->
                                    if (data != null && error == null) {
                                        println("‚úÖ Nouvelles commandes r√©cup√©r√©es de l'API")
                                        // Les donn√©es seront automatiquement mises √† jour par le LaunchedEffect existant
                                    } else {
                                        println("‚ùå Erreur lors du rafra√Æchissement des commandes: $error")
                                    }
                                }
                            }
                        } catch (e: Exception) {
                            println("‚ùå Exception lors du rafra√Æchissement: ${e.message}")
                            Log.e("MainActivity", "Exception lors du rafra√Æchissement", e)
                        }
                    }
                }
            }
        }
        
        // Enregistrer le receiver pour les broadcasts locaux
        val filter = IntentFilter(FCMService.ACTION_REFRESH_DATA)
        registerReceiver(commandeReceiver, filter)
        
        println("‚úÖ BroadcastReceiver configur√© pour ACTION_REFRESH_DATA")
        Log.d("MainActivity", "‚úÖ BroadcastReceiver configur√© pour ACTION_REFRESH_DATA")
    }

    
    override fun onDestroy() {
        super.onDestroy()
        // D√©sinscrire le BroadcastReceiver
        commandeReceiver?.let {
            try {
                unregisterReceiver(it)
                println("‚úÖ BroadcastReceiver d√©sinscrit")
                Log.d("MainActivity", "‚úÖ BroadcastReceiver d√©sinscrit")
            } catch (e: Exception) {
                println("‚ùå Erreur lors de la d√©sinscription du receiver: ${e.message}")
                Log.e("MainActivity", "‚ùå Erreur lors de la d√©sinscription du receiver", e)
            }
        }
    }
}

// TODO: Replace with Compose-native UpdateDialog

@Composable
fun ErrorFallbackScreen(error: String) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.padding(16.dp)
        ) {
            Text("‚ùå Erreur d'initialisation")
            Text("D√©tails: $error")
            Text("Veuillez red√©marrer l'application")
        }
    }
}

@Composable
fun SuzoskyCoursierApp(updateInfoToShow: Array<UpdateInfo?>) {
    val context = LocalContext.current
    
    // Gestion de l'intent pour ouvrir une commande sp√©cifique
    LaunchedEffect(Unit) {
        val activity = context as? ComponentActivity
        activity?.intent?.let { intent ->
            val openOrderId = intent.getStringExtra("open_order_id")
            if (!openOrderId.isNullOrBlank()) {
                println("üéØ Intent d√©tect√©: Ouverture commande ID $openOrderId")
                Log.d("MainActivity", "üéØ Intent d√©tect√©: Ouverture commande ID $openOrderId")
                
                // Forcer le rafra√Æchissement et l'ouverture de l'onglet Courses
                // Cette logique sera g√©r√©e par les param√®tres de CoursierScreenNew
            }
        }
    }
    
    // Affichage du dialog de mise √† jour si besoin
    val updateInfo = updateInfoToShow[0]
    val uriHandler = androidx.compose.ui.platform.LocalUriHandler.current
    if (updateInfo != null) {
        AlertDialog(
            onDismissRequest = { updateInfoToShow[0] = null },
            confirmButton = {
                TextButton(onClick = {
                    uriHandler.openUri(updateInfo.downloadUrl)
                    updateInfoToShow[0] = null
                }) { Text("Mettre √† jour") }
            },
            dismissButton = {
                if (!updateInfo.isMandatory) {
                    TextButton(onClick = { updateInfoToShow[0] = null }) { Text("Plus tard") }
                }
            },
            title = { Text("Mise √† jour disponible") },
            text = {
                Column {
                    Text("Version: ${updateInfo.versionName}")
                    Spacer(Modifier.height(8.dp))
                    Text(updateInfo.releaseNotes ?: "Une nouvelle version est disponible.")
                }
            }
        )
    }
    // Persist a simple login flag in SharedPreferences to stabilize navigation after login
    val prefs = remember { context.getSharedPreferences("suzosky_prefs", android.content.Context.MODE_PRIVATE) }
    
    // üî• Capturer r√©f√©rence √† l'Activity pour Voice + Maps
    val activity = context as? MainActivity
    
    println("üîÑ SuzoskyCoursierApp - Initialisation")
    
    // √âtat global avec vraies donn√©es
        val coursierNomState = remember { mutableStateOf(prefs.getString("coursier_nom", "Coursier") ?: "Coursier") }
        val coursierIdState = remember { mutableStateOf(prefs.getInt("coursier_id", -1).takeIf { it > 0 } ?: -1) }
        val coursierStatutState = remember { mutableStateOf("EN_LIGNE") }
        val soldeReelState = remember { mutableStateOf(0.0) }
        val commandesReellesState = remember { mutableStateOf(emptyList<Commande>()) }
        val gainsDuJourState = remember { mutableStateOf(0.0) }
        val totalCommandesState = remember { mutableStateOf(0) }
        val noteGlobaleState = remember { mutableStateOf(0.0) }
        val coursierTelephoneState = remember { mutableStateOf("") }
        val coursierEmailState = remember { mutableStateOf("") }
        val dateInscriptionState = remember { mutableStateOf("") }
        val coursierMatriculeState = remember { mutableStateOf("") }
        
        // Variables pour le rafra√Æchissement automatique des commandes
        val shouldRefreshCommandesState = remember { mutableStateOf(false) }
        val newOrderIdState = remember { mutableStateOf<String?>(null) }
        
        var coursierNom by coursierNomState
        var coursierId by coursierIdState
        var coursierStatut by coursierStatutState
        var soldeReel by soldeReelState
        var commandesReelles by commandesReellesState
        var gainsDuJour by gainsDuJourState
        var totalCommandes by totalCommandesState
        var noteGlobale by noteGlobaleState
        var coursierTelephone by coursierTelephoneState
        var coursierEmail by coursierEmailState
        var dateInscription by dateInscriptionState
        var coursierMatricule by coursierMatriculeState
        var shouldRefreshCommandes by shouldRefreshCommandesState
        var newOrderId by newOrderIdState
        
    // Persist login UI state across recompositions/config changes + initialize from prefs
    var isLoggedIn by rememberSaveable { mutableStateOf(prefs.getBoolean("isLoggedIn", false)) }
    if (!isLoggedIn) {
        println("üîê Affichage LoginScreen")
        LoginScreen(onLoginSuccess = {
            println("‚úÖ Login r√©ussi")
            try { prefs.edit { putBoolean("isLoggedIn", true) } } catch (_: Exception) {}
            isLoggedIn = true
            // R√©cup√©rer l'ID agent r√©el c√¥t√© serveur
            ApiService.checkCoursierSession { id, err ->
                if ((id ?: 0) > 0) {
                    coursierId = id!!
                    try { prefs.edit { putInt("coursier_id", coursierId) } } catch (_: Exception) {}
                    // FORCER l'enregistrement token FCM apr√®s connexion - VERSION ROBUSTE  
                    try {
                        Log.d("MainActivity", "üî• Post-connexion: For√ßage FCM pour coursier $coursierId")
                        println("üî• Post-connexion: For√ßage FCM pour coursier $coursierId")
                        
                        // Essayer d'abord le token sauv√©
                        val savedToken = prefs.getString("fcm_token", null)
                        if (savedToken != null) {
                            Log.d("MainActivity", "üéØ Utilisation token sauv√©")
                            println("üéØ Utilisation token sauv√©")
                            ApiService.registerDeviceToken(context, coursierId, savedToken)
                        }
                        
                        // Puis r√©cup√©rer un nouveau token pour √™tre s√ªr
                        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
                            if (task.isSuccessful) {
                                val token = task.result
                                Log.d("MainActivity", "‚ú® Nouveau token post-connexion: ${token.substring(0, 20)}...")
                                println("‚ú® Nouveau token post-connexion: ${token.substring(0, 20)}...")
                                
                                prefs.edit().putString("fcm_token", token).apply()
                                ApiService.registerDeviceToken(context, coursierId, token)
                            } else {
                                Log.e("MainActivity", "‚ùå Erreur r√©cup√©ration token post-connexion")
                                println("‚ùå Erreur r√©cup√©ration token post-connexion")
                            }
                        }
                    } catch (e: Exception) {
                        Log.e("MainActivity", "üí• Exception FCM post-connexion", e)
                        println("üí• Exception FCM post-connexion: ${e.message}")
                    }
                } else {
                    println("‚ö†Ô∏è check_session a √©chou√©: ${'$'}err")
                }
            }
        })
    } else {
        println("üè† Affichage √©cran principal")

        // √âtats pour les commandes
        var loading by remember { mutableStateOf(true) }
        var error by remember { mutableStateOf<String?>(null) }

    // Paiement CinetPay int√©gr√©
    var paymentUrl by remember { mutableStateOf<String?>(null) }
    var showPaymentDialog by remember { mutableStateOf(false) }
    var pendingRechargeAmount by remember { mutableStateOf<Double?>(null) }
    var isInitiatingPayment by remember { mutableStateOf(false) }
    var isPollingBalance by remember { mutableStateOf(false) }
    
    // Compteur pour forcer le rechargement
    var refreshTrigger by remember { mutableStateOf(System.currentTimeMillis()) }

        // Charger les VRAIES donn√©es au login - SE D√âCLENCHE √Ä CHAQUE CHANGEMENT DE refreshTrigger
        LaunchedEffect(isLoggedIn, coursierId, refreshTrigger) {
            Log.d("MainActivity", "LaunchedEffect triggered - isLoggedIn=$isLoggedIn, coursierId=$coursierId, refreshTrigger=$refreshTrigger")
            if (!isLoggedIn) return@LaunchedEffect

            if (coursierId <= 0) {
                println("‚ö†Ô∏è coursierId invalide ou absent - v√©rification session c√¥t√© serveur")
                loading = true
                ApiService.checkCoursierSession { id, err ->
                    if ((id ?: 0) > 0) {
                        coursierId = id!!
                        try { prefs.edit { putInt("coursier_id", coursierId) } } catch (_: Exception) {}
                    } else {
                        loading = false
                        error = err ?: "Session invalide"
                        println("‚ö†Ô∏è Impossible de r√©cup√©rer l'ID coursier: ${'$'}err")
                    }
                }
                return@LaunchedEffect
            }

            println("üîÑ Chargement des VRAIES donn√©es depuis l'API")
            Log.d("MainActivity", "Calling ApiService.getCoursierData for coursierId=$coursierId")
            loading = true

            ApiService.getCoursierData(coursierId) { data, err ->
                Log.d("MainActivity", "API Response - data: ${data != null}, error: $err")
                if (data != null) {
                    println("‚úÖ Donn√©es r√©elles re√ßues")
                    fun toDoubleSafe(v: Any?): Double = when (v) {
                        null -> 0.0
                        is Number -> v.toDouble()
                        is String -> v.toDoubleOrNull() ?: 0.0
                        else -> 0.0
                    }
                    fun toStringSafe(v: Any?): String = when (v) {
                        null -> ""
                        is String -> v
                        else -> v.toString()
                    }
                    fun toIntFromDistanceKm(v: Any?): Int {
                        val km = toDoubleSafe(v)
                        return (km * 3.0).toInt()
                    }

                    // Charger le profil complet (nom, t√©l√©phone, stats)
                    ApiService.getCoursierProfile(coursierId) { pData, pErr ->
                        if (pData != null) {
                            val nomComplet = toStringSafe(pData["nom_complet"]).ifBlank { coursierNom }
                            if (nomComplet.isNotBlank()) {
                                coursierNom = nomComplet
                                try { prefs.edit { putString("coursier_nom", nomComplet) } } catch (_: Exception) {}
                            }
                            totalCommandes = ((pData["total_commandes"]) as? Int) ?: (toDoubleSafe(pData["total_commandes"]).toInt())
                            noteGlobale = toDoubleSafe(pData["note_globale"]).let { if (it.isFinite()) it else 0.0 }
                            coursierTelephone = toStringSafe(pData["telephone"])
                            coursierEmail = toStringSafe(pData["email"]).ifBlank { coursierEmail }
                            dateInscription = toStringSafe(pData["date_inscription"])
                        }
                    }

                    soldeReel = toDoubleSafe(data["balance"]) 
                        .let { if (it.isFinite()) it else 0.0 }
                    gainsDuJour = toDoubleSafe(data["gains_du_jour"]) 
                        .let { if (it.isFinite()) it else 0.0 }
                    
                    // R√©cup√©rer le matricule r√©el depuis l'API
                    val matriculeFromApi = toStringSafe(data["matricule"])
                    if (matriculeFromApi.isNotBlank()) {
                        coursierMatricule = matriculeFromApi
                        try { prefs.edit { putString("coursier_matricule", matriculeFromApi) } } catch (_: Exception) {}
                    }

                    // Convertir les commandes
                    @Suppress("UNCHECKED_CAST")
                    val commandesData = data["commandes"] as? List<Map<String, Any>> ?: emptyList()
                    Log.d("MainActivity", "Commandes data received: ${commandesData.size} orders")
                    commandesReelles = try {
                        commandesData.mapIndexed { index, cmdMap ->
                            // DEBUG: Logger les donn√©es brutes
                            Log.d("MainActivity", "=== ORDER $index RAW DATA ===")
                            Log.d("MainActivity", "telephoneDestinataire raw: ${cmdMap["telephoneDestinataire"]}")
                            Log.d("MainActivity", "latitudeEnlevement raw: ${cmdMap["latitudeEnlevement"]}")
                            Log.d("MainActivity", "longitudeEnlevement raw: ${cmdMap["longitudeEnlevement"]}")
                            Log.d("MainActivity", "latitudeLivraison raw: ${cmdMap["latitudeLivraison"]}")
                            Log.d("MainActivity", "longitudeLivraison raw: ${cmdMap["longitudeLivraison"]}")
                            
                            // Extraire les coordonn√©es GPS
                            val latEnlevement = toDoubleSafe(cmdMap["latitudeEnlevement"])
                            val lonEnlevement = toDoubleSafe(cmdMap["longitudeEnlevement"])
                            val latLivraison = toDoubleSafe(cmdMap["latitudeLivraison"])
                            val lonLivraison = toDoubleSafe(cmdMap["longitudeLivraison"])
                            
                            Log.d("MainActivity", "Parsed: lat=$latEnlevement, lon=$lonEnlevement")
                            
                            val coordEnlevement = if (latEnlevement != 0.0 && lonEnlevement != 0.0 && 
                                                       latEnlevement.isFinite() && lonEnlevement.isFinite()) {
                                com.suzosky.coursier.data.models.Coordonnees(latEnlevement, lonEnlevement)
                            } else null
                            
                            val coordLivraison = if (latLivraison != 0.0 && lonLivraison != 0.0 && 
                                                     latLivraison.isFinite() && lonLivraison.isFinite()) {
                                com.suzosky.coursier.data.models.Coordonnees(latLivraison, lonLivraison)
                            } else null
                            
                            Log.d("MainActivity", "Created coords: enlevement=$coordEnlevement, livraison=$coordLivraison")
                            
                            Commande(
                                id = toStringSafe(cmdMap["id"]),
                                clientNom = toStringSafe(cmdMap["clientNom"]),
                                clientTelephone = toStringSafe(cmdMap["clientTelephone"]),
                                telephoneDestinataire = toStringSafe(cmdMap["telephoneDestinataire"]),
                                adresseEnlevement = toStringSafe(cmdMap["adresseEnlevement"]),
                                adresseLivraison = toStringSafe(cmdMap["adresseLivraison"]),
                                coordonneesEnlevement = coordEnlevement,
                                coordonneesLivraison = coordLivraison,
                                distance = toDoubleSafe(cmdMap["distance"]).let { if (it.isFinite()) it else 0.0 },
                                tempsEstime = toIntFromDistanceKm(cmdMap["distance"]),
                                prixTotal = toDoubleSafe(cmdMap["prixLivraison"]).let { if (it.isFinite()) it else 0.0 },
                                prixLivraison = toDoubleSafe(cmdMap["prixLivraison"]).let { if (it.isFinite()) it else 0.0 },
                                methodePaiement = toStringSafe(cmdMap["methodePaiement"]).ifBlank { "especes" },
                                // Ne pas forcer un statut test. Si vide, classer comme "inconnue" pour √©viter faux positifs.
                                statut = toStringSafe(cmdMap["statut"]).ifBlank { "inconnue" },
                                // √âviter les labels de d√©mo; utiliser les champs si pr√©sents, sinon vide
                                dateCommande = toStringSafe(cmdMap["dateCommande"]),
                                heureCommande = toStringSafe(cmdMap["heureCommande"]),
                                description = toStringSafe(cmdMap["description"]),
                                typeCommande = "Standard"
                            )
                        }.filter { commande ->
                            // ‚ö†Ô∏è FILTRER LES COMMANDES TERMIN√âES (livree, annulee, refusee, cash_recu)
                            val statut = commande.statut.lowercase()
                            val estActive = statut != "livree" && 
                                           statut != "annulee" && 
                                           statut != "refusee" &&
                                           statut != "cash_recu" &&
                                           statut != "terminee"
                            
                            if (!estActive) {
                                Log.d("MainActivity", "üö´ Commande ${commande.id} FILTR√âE (statut: $statut)")
                            }
                            
                            estActive
                        }
                    } catch (e: Exception) {
                        TelemetrySDK.getInstance()?.reportCrash(
                            throwable = e,
                            screenName = "MainActivity",
                            userAction = "parse_commandes",
                            additionalData = mapOf("payload_size" to commandesData.size)
                        )
                        println("‚ùå Erreur conversion commandes: ${e.message}")
                        emptyList()
                    }
                    Log.d("MainActivity", "Commandes loaded: ${commandesReelles.size} orders mapped successfully")
                    commandesReelles.forEach { cmd ->
                        Log.d("MainActivity", "  Order: id=${cmd.id}, statut=${cmd.statut}, client=${cmd.clientNom}")
                    }
                    error = null
                } else {
                    println("‚ùå Erreur chargement donn√©es: $err")
                    error = err
                }
                loading = false
            }
        }

        // Surveillance de session: d√©connexion automatique si SESSION_REVOKED uniquement
        LaunchedEffect(isLoggedIn) {
            if (isLoggedIn) {
                var consecutiveErrors = 0
                while (isLoggedIn) {
                    kotlinx.coroutines.delay(30000) // toutes les 30s (moins agressif)
                    ApiService.checkCoursierSession { id, err ->
                        if (err != null) {
                            val e = err.uppercase()
                            // Seul SESSION_REVOKED force la d√©connexion (pas NO_SESSION qui peut √™tre temporaire)
                            if (e.contains("SESSION_REVOKED")) {
                                consecutiveErrors++
                                // D√©connexion uniquement apr√®s 2 erreurs cons√©cutives pour √©viter les faux positifs
                                if (consecutiveErrors >= 2) {
                                    try { prefs.edit { putBoolean("isLoggedIn", false) } } catch (_: Exception) {}
                                    isLoggedIn = false
                                    // TODO: Show Compose snackbar for session expiration
                                }
                            } else {
                                // Erreur temporaire, on ignore
                                consecutiveErrors = maxOf(0, consecutiveErrors - 1)
                            }
                        } else {
                            // Succ√®s, reset du compteur d'erreurs
                            consecutiveErrors = 0
                        }
                    }
                }
            }
        }

        // üî• POLLING AUTOMATIQUE DES NOUVELLES COMMANDES - CHAQUE SECONDE !
        LaunchedEffect(isLoggedIn, coursierId) {
            if (isLoggedIn && coursierId > 0) {
                Log.d("MainActivity", "üîÑ D√©marrage du polling automatique ULTRA-RAPIDE (1s)")
                
                // üî• SET pour tracker les IDs d√©j√† vus
                val commandesVues = mutableSetOf<String>()
                var premiereFois = true // Flag pour initialisation
                
                while (isLoggedIn && coursierId > 0) {
                    kotlinx.coroutines.delay(1000) // CHAQUE SECONDE !
                    
                    Log.d("MainActivity", "üîç Polling: V√©rification des nouvelles commandes...")
                    ApiService.getCoursierData(coursierId) { data, err ->
                        if (data != null) {
                            @Suppress("UNCHECKED_CAST")
                            val commandesData = data["commandes"] as? List<Map<String, Any>> ?: emptyList()
                            val nbCommandesRecues = commandesData.size
                            val nbCommandesActuelles = commandesReelles.size
                            
                            Log.d("MainActivity", "üìä Polling: ${nbCommandesRecues} commandes (avant: ${nbCommandesActuelles})")
                            
                            // ü©∫ Mettre √† jour le timestamp de derni√®re sync r√©ussie
                            activity?.lastSyncTimestamp = System.currentTimeMillis()
                            
                            // üî• PREMI√àRE FOIS : Initialiser le Set avec toutes les commandes existantes (pas de notification)
                            if (premiereFois) {
                                commandesData.forEach { cmdMap ->
                                    val cmdId = cmdMap["id"]?.toString() ?: ""
                                    if (cmdId.isNotEmpty()) {
                                        commandesVues.add(cmdId)
                                    }
                                }
                                Log.d("MainActivity", "üéØ Initialisation: ${commandesVues.size} commandes enregistr√©es (pas de notification)")
                                premiereFois = false
                                refreshTrigger++
                                return@getCoursierData
                            }
                            
                            // üî• NOUVELLE D√âTECTION : Chercher les IDs nouvelles
                            Log.d("MainActivity", "üîç CommandesVues (${commandesVues.size}): ${commandesVues.joinToString(",")}")
                            Log.d("MainActivity", "üîç CommandesRecues (${commandesData.size}): ${commandesData.map { it["id"]?.toString() ?: "?" }.joinToString(",")}")
                            
                            val nouvellesCommandes = commandesData.filter { cmdMap ->
                                val cmdId = cmdMap["id"]?.toString() ?: ""
                                val isNew = cmdId.isNotEmpty() && !commandesVues.contains(cmdId)
                                if (isNew) {
                                    Log.d("MainActivity", "üÜï NOUVELLE COMMANDE TROUV√âE: ID=$cmdId")
                                }
                                isNew
                            }
                            
                            if (nouvellesCommandes.isNotEmpty()) {
                                Log.d("MainActivity", "üÜï ${nouvellesCommandes.size} NOUVELLES COMMANDES D√âTECT√âES ! Refresh + notification...")
                                
                                // Ajouter les nouveaux IDs au set
                                nouvellesCommandes.forEach { cmdMap ->
                                    val cmdId = cmdMap["id"]?.toString() ?: ""
                                    if (cmdId.isNotEmpty()) {
                                        commandesVues.add(cmdId)
                                    }
                                }
                                
                                // üîî NOTIFICATION SONORE + VIBRATION pour CHAQUE nouvelle commande
                                nouvellesCommandes.forEach { newCommande ->
                                    try {
                                        // üî• VIBRATION PUISSANTE - Pattern : 0ms, 500ms ON, 200ms OFF, 500ms ON, 200ms OFF, 500ms ON
                                        val vibrator = activity?.getSystemService(Context.VIBRATOR_SERVICE) as? android.os.Vibrator
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                                            val vibrationPattern = longArrayOf(
                                                0,      // D√©lai initial
                                                500,    // Vibration 1 (forte)
                                                200,    // Pause
                                                500,    // Vibration 2 (forte)
                                                200,    // Pause
                                                500     // Vibration 3 (forte)
                                            )
                                            vibrator?.vibrate(android.os.VibrationEffect.createWaveform(vibrationPattern, -1))
                                        } else {
                                            @Suppress("DEPRECATION")
                                            vibrator?.vibrate(1500) // 1.5 secondes continue
                                        }
                                        
                                        Log.d("MainActivity", "üì≥ Vibration d√©clench√©e pour commande ${newCommande["id"]}")
                                        
                                        // Son de notification
                                        val notification = android.media.RingtoneManager.getDefaultUri(android.media.RingtoneManager.TYPE_NOTIFICATION)
                                        val ringtone = android.media.RingtoneManager.getRingtone(activity?.applicationContext, notification)
                                        ringtone.play()
                                        
                                        // üîä Annonce vocale
                                        val clientName = newCommande["client_nom"]?.toString() ?: "un client"
                                        val destination = newCommande["adresse_livraison"]?.toString() ?: "destination inconnue"
                                        activity?.voiceGuidance?.announceNewOrder(clientName, destination)
                                        
                                        Log.d("MainActivity", "üîî Notification √©mise: commande ${newCommande["id"]} - $clientName vers $destination")
                                    } catch (e: Exception) {
                                        Log.e("MainActivity", "‚ùå Erreur notification", e)
                                    }
                                }
                                
                                refreshTrigger++
                            } else if (nbCommandesRecues != nbCommandesActuelles) {
                                // Nombre chang√© mais pas de nouvelles IDs ‚Üí mise √† jour statut
                                refreshTrigger++
                            } else {
                                // V√©rifier si le statut d'une commande a chang√©
                                commandesData.forEach { cmdMap ->
                                    val cmdId = cmdMap["id"]?.toString() ?: ""
                                    val cmdStatut = cmdMap["statut"]?.toString() ?: ""
                                    val existante = commandesReelles.find { it.id == cmdId }
                                    if (existante != null && existante.statut != cmdStatut) {
                                        Log.d("MainActivity", "üîÑ Commande $cmdId: statut chang√© de ${existante.statut} ‚Üí $cmdStatut")
                                        refreshTrigger++
                                        return@forEach
                                    }
                                }
                            }
                        } else {
                            Log.d("MainActivity", "‚ö†Ô∏è Polling: Erreur API - $err")
                        }
                    }
                }
                Log.d("MainActivity", "‚èπÔ∏è Arr√™t du polling automatique")
            }
        }

        Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues ->
            Box(modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
            ) {
                when {
                    loading -> {
                        println("‚è≥ √âtat loading")
                        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            CircularProgressIndicator()
                        }
                    }
                    error != null -> {
                        println("‚ùå √âtat erreur: $error")
                        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            Text("Erreur: $error")
                        }
                    }
                    // ü©∫ SI AUCUNE COMMANDE ACTIVE ‚Üí √âcran d'attente avec voyant syst√®me
                    commandesReelles.isEmpty() -> {
                        println("‚è∏Ô∏è Aucune commande active - Affichage √©cran d'attente")
                        val systemHealth = activity?.calculateSystemHealth(prefs, hasRecentData = !loading) 
                            ?: SystemHealth(
                                status = HealthStatus.WARNING,
                                databaseConnected = false,
                                fcmTokenActive = false,
                                syncWorking = false,
                                lastSyncTimestamp = System.currentTimeMillis(),
                                message = "Impossible de calculer l'√©tat syst√®me"
                            )
                        
                        WaitingForOrdersScreen(
                            systemHealth = systemHealth,
                            nbCommandesEnAttente = 0,
                            modifier = Modifier.fillMaxSize()
                        )
                    }
                    else -> {
                        println("‚úÖ Affichage CoursierScreenNew avec VRAIES donn√©es")
                        // VRAIES DONN√âES de l'API
                        CoursierScreenNew(
                            modifier = Modifier.fillMaxSize(),
                            coursierId = coursierId,
                            coursierNom = coursierNom,
                            coursierStatut = coursierStatut,
                            totalCommandes = totalCommandes,
                            noteGlobale = noteGlobale,
                            coursierTelephone = coursierTelephone,
                            coursierEmail = coursierEmail,
                            dateInscription = dateInscription,
                            commandes = commandesReelles, // VRAIES commandes de l'API
                            balance = soldeReel.toInt(), // VRAI solde de l'API
                            gainsDuJour = gainsDuJour.toInt(), // VRAIS gains de l'API
                            onStatutChange = { nouveauStatut -> coursierStatut = nouveauStatut },
                            onCommandeAccept = { commandeId ->
                                try { OrderRingService.stop(context) } catch (_: Exception) {}
                                
                                // üîä Annonce vocale UNIQUEMENT (PAS DE MAPS SUR ACCEPT !)
                                activity?.voiceGuidance?.announceOrderAccepted()
                                
                                // Accepter la commande via API
                                ApiService.respondToOrder(commandeId, coursierId.toString(), "accept") { success, message ->
                                    if (success) {
                                        // D√©clencher un rechargement des commandes
                                        shouldRefreshCommandes = true
                                    }
                                }
                            },
                            onCommandeReject = { commandeId ->
                                try { OrderRingService.stop(context) } catch (_: Exception) {}
                                // Refuser la commande via API
                                ApiService.respondToOrder(commandeId, coursierId.toString(), "refuse") { success, message ->
                                    if (success) {
                                        // D√©clencher un rechargement des commandes
                                        shouldRefreshCommandes = true
                                    }
                                }
                            },
                            onCommandeAttente = { /* TODO: Waiting logic */ },
                            onNavigateToProfile = { /* TODO: Navigation */ },
                            onNavigateToHistorique = { /* TODO: Navigation */ },
                            onNavigateToGains = { /* TODO: Navigation */ },

                            onLogout = {
                                deactivateFcmTokenOnServer(context)
                                try { prefs.edit { putBoolean("isLoggedIn", false) } } catch (_: Exception) {}
                                isLoggedIn = false
                            },
                            // Ouvrir le paiement via Custom Tab et surveiller la confirmation
                            onRecharge = { amount ->
                                if (amount > 0) {
                                    pendingRechargeAmount = amount.toDouble()
                                    isInitiatingPayment = true
                                    ApiService.initRecharge(coursierId, amount.toDouble()) { url, error ->
                                        isInitiatingPayment = false
                                        if (url != null) {
                                            paymentUrl = url
                                            showPaymentDialog = true
                                        } else {
                                            // TODO: Show Compose snackbar for payment error
                                        }
                                    }
                                } else {
                                    // TODO: Show Compose snackbar for invalid amount
                                }
                            }
                        )
                        if (isInitiatingPayment) {
                            PaymentStatusDialog(
                                title = "Initialisation du paiement",
                                message = "Connexion s√©curis√©e √† CinetPay‚Ä¶",
                                cancellable = false
                            )
                        }

                        if (isPollingBalance) {
                            PaymentStatusDialog(
                                title = "Validation du paiement",
                                message = "Nous v√©rifions la confirmation et mettons √† jour votre solde‚Ä¶",
                                cancellable = false
                            )
                        }

                        if (showPaymentDialog && paymentUrl != null) {
                            val initialBalanceSnapshot = soldeReel
                            PaymentWebViewDialog(
                                url = paymentUrl!!,
                                amount = pendingRechargeAmount,
                                onDismiss = {
                                    showPaymentDialog = false
                                    paymentUrl = null
                                },
                                onCompleted = { success, transactionId ->
                                    showPaymentDialog = false
                                    paymentUrl = null
                                    pendingRechargeAmount = null
                                    if (success) {
                                        isPollingBalance = true
                                        ApiService.pollBalanceUntilChange(
                                            coursierId = coursierId,
                                            initialBalance = initialBalanceSnapshot,
                                            onResult = { newBalance, updated ->
                                                isPollingBalance = false
                                                if (updated && newBalance != null) {
                                                    soldeReel = newBalance
                                                    // TODO: Show Compose snackbar for recharge success
                                                } else {
                                                    // TODO: Show Compose snackbar for payment info
                                                }
                                            }
                                        )
                                    } else {
                                        // TODO: Show Compose snackbar for recharge not confirmed
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }
    }

    /*
    // Configuration du BroadcastReceiver pour les nouvelles commandes - DOUBLE D√âCLARATION COMMENT√âE
    private fun setupCommandeReceiver() {
        commandeReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                if (intent?.action == FCMService.ACTION_REFRESH_DATA) {
                    val orderId = intent.getStringExtra(FCMService.EXTRA_ORDER_ID)
                    println("üîî BroadcastReceiver: Nouvelle commande re√ßue - Order ID: $orderId")
                    Log.d("MainActivity", "üîî BroadcastReceiver: Nouvelle commande re√ßue - Order ID: $orderId")
                    
                    // D√©clencher un rafra√Æchissement des donn√©es API
                    lifecycleScope.launch {
                        try {
                            val prefs = getSharedPreferences("suzosky_prefs", MODE_PRIVATE)
                            val coursierId = prefs.getInt("coursier_id", -1)
                            if (coursierId > 0) {
                                println("üîÑ Rafra√Æchissement des commandes depuis l'API...")
                                
                                // Appeler l'API pour r√©cup√©rer les nouvelles commandes
                                ApiService.getCoursierDetails(coursierId) { data, error ->
                                    if (data != null && error == null) {
                                        println("‚úÖ Nouvelles commandes r√©cup√©r√©es de l'API")
                                        // Les donn√©es seront automatiquement mises √† jour par le LaunchedEffect existant
                                    } else {
                                        println("‚ùå Erreur lors du rafra√Æchissement des commandes: $error")
                                    }
                                }
                            }
                        } catch (e: Exception) {
                            println("‚ùå Exception lors du rafra√Æchissement: ${e.message}")
                            Log.e("MainActivity", "Exception lors du rafra√Æchissement", e)
                        }
                    }
                }
            }
        }
        
        // Enregistrer le receiver pour les broadcasts locaux
        val filter = IntentFilter(FCMService.ACTION_REFRESH_DATA)
        registerReceiver(commandeReceiver, filter)
        
        println("‚úÖ BroadcastReceiver configur√© pour ACTION_REFRESH_DATA")
        Log.d("MainActivity", "‚úÖ BroadcastReceiver configur√© pour ACTION_REFRESH_DATA")
    }

    override fun onDestroy() {
        super.onDestroy()
        
        // üîä Arr√™ter le TTS
        voiceGuidance?.shutdown()
        voiceGuidance = null
        Log.d("MainActivity", "üîä Service vocal arr√™t√©")
        
        // D√©sinscrire le BroadcastReceiver
        commandeReceiver?.let {
            try {
                unregisterReceiver(it)
                println("‚úÖ BroadcastReceiver d√©sinscrit")
                Log.d("MainActivity", "‚úÖ BroadcastReceiver d√©sinscrit")
            } catch (e: Exception) {
                println("‚ùå Erreur lors de la d√©sinscription du receiver: ${e.message}")
                Log.e("MainActivity", "‚ùå Erreur lors de la d√©sinscription du receiver", e)
            }
        }
    }
    */
}


