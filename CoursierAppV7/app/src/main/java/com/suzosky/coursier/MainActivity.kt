
package com.suzosky.coursier

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.view.WindowCompat
import androidx.core.content.ContextCompat
import androidx.core.content.edit
import androidx.core.net.toUri
import androidx.lifecycle.lifecycleScope
import com.suzosky.coursier.data.models.Commande
import com.suzosky.coursier.network.ApiService
import com.suzosky.coursier.services.AutoUpdateService
import com.suzosky.coursier.services.OrderRingService
import com.suzosky.coursier.telemetry.TelemetrySDK
import com.suzosky.coursier.telemetry.UpdateInfo
import com.suzosky.coursier.ui.components.PaymentStatusDialog
import com.suzosky.coursier.ui.components.PaymentWebViewDialog
import com.suzosky.coursier.ui.screens.CoursierScreenNew
import com.suzosky.coursier.ui.screens.LoginScreen
import com.suzosky.coursier.ui.theme.SuzoskyTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.Call
import okhttp3.Callback
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import java.io.IOException
import dagger.hilt.android.AndroidEntryPoint
import com.google.firebase.messaging.FirebaseMessaging

// Fonction utilitaire pour d√©sactiver le token FCM c√¥t√© serveur
fun deactivateFcmTokenOnServer(context: android.content.Context) {
    val prefs = context.getSharedPreferences("suzosky_prefs", android.content.Context.MODE_PRIVATE)
    val token = prefs.getString("fcm_token", null)
    if (token.isNullOrBlank()) return
    val client = OkHttpClient()
    val formBody = FormBody.Builder().add("token", token).build()
    val url = "https://coursier.conciergerie-privee-suzosky.com/COURSIER_LOCAL/deactivate_device_token.php"
    val request = Request.Builder().url(url).post(formBody).build()
    CoroutineScope(Dispatchers.IO).launch {
        try {
            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    Log.w("Logout", "√âchec d√©sactivation token c√¥t√© serveur: ${e.message}")
                }
                override fun onResponse(call: Call, response: Response) {
                    Log.d("Logout", "Token d√©sactiv√© c√¥t√© serveur: ${response.code}")
                    response.close()
                }
            })
        } catch (e: Exception) {
            Log.w("Logout", "Erreur d√©sactivation token: ${e.message}")
            import android.os.Bundle
            import android.util.Log
 * MainActivity - Point d'entr√©e de l'app Suzosky Coursier
 * Interface 100% identique au design web coursier.php
 * VERSION S√âCURIS√âE avec gestion d'erreurs
 */
@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            println("üöÄ MainActivity.onCreate - D√©but de l'initialisation")
            
            // Configuration pour le mode edge-to-edge
            enableEdgeToEdge()
            WindowCompat.setDecorFitsSystemWindows(window, false)
            
            println("‚úÖ Configuration edge-to-edge r√©ussie")
            
            // Initialiser la t√©l√©m√©trie
            val telemetry = TelemetrySDK.initialize(
                context = this,
                baseUrl = "https://coursier.conciergerie-privee-suzosky.com",
                apiKey = "suzosky_telemetry_2025"
            )
            
            // V√©rifier les mises √† jour
            lifecycleScope.launch {
                try {
                    val updateInfo = telemetry.checkForUpdates()
                    if (updateInfo?.isMandatory == true) {
                        // G√©rer mise √† jour obligatoire
                        showUpdateDialog(updateInfo)
                    }
                } catch (e: Exception) {
                    println("Erreur v√©rification mises √† jour: ${e.message}")
                }
            }
            
            val prefs = getSharedPreferences("suzosky_prefs", MODE_PRIVATE)

            // Demander les permissions essentielles : notifications + localisation
            val permissionsToRequest = mutableListOf<String>()
            
            // Android 13+ : permission notifications
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                    permissionsToRequest.add(android.Manifest.permission.POST_NOTIFICATIONS)
                }
            }
            
            // Permissions de localisation (obligatoires pour les coursiers)
            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(android.Manifest.permission.ACCESS_FINE_LOCATION)
            }
            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(android.Manifest.permission.ACCESS_COARSE_LOCATION)
            }
            
            // Demander toutes les permissions manquantes
            if (permissionsToRequest.isNotEmpty()) {
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                    requestPermissions(permissionsToRequest.toTypedArray(), 1001)
                }
            }
            
            // D√©marrer le service de mise √† jour automatique avec protection Android 14
            val canStartService = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            if (canStartService) {
                // Protection sp√©ciale pour Android 14 (API 34)
                if (android.os.Build.VERSION.SDK_INT >= 34) {
                    // Android 14 : d√©lai avant d√©marrage du service
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        try { 
                            AutoUpdateService.startService(this) 
                            println("üîÑ Service d√©marr√© avec d√©lai (Android 14)")
                        } catch (e: SecurityException) {
                            println("‚ùå Service bloqu√© sur Android 14: ${e.message}")
                        }
                    }, 2000) // D√©lai de 2 secondes
                } else {
                    // Android 13 : d√©marrage normal
                    try { 
                        AutoUpdateService.startService(this) 
                        println("üîÑ Service d√©marr√© normalement (Android 13)")
                    } catch (e: SecurityException) {
                        println("‚ùå Service bloqu√©: ${e.message}")
                    }
                }
            }
            
            println("üîÑ Permissions et services configur√©s")
            
            setContent {
                SuzoskyTheme {
                    SuzoskyCoursierApp()
                }
            }
            // FORCER l'enregistrement FCM d√®s le d√©marrage - VERSION ROBUSTE
            try {
                Log.d("MainActivity", "üî• D√âBUT for√ßage enregistrement FCM au d√©marrage")
                println("üî• D√âBUT for√ßage enregistrement FCM au d√©marrage")
                
                FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        val token = task.result
                        Log.d("MainActivity", "‚úÖ Token FCM r√©cup√©r√©: ${token.substring(0, 20)}...")
                        println("‚úÖ Token FCM r√©cup√©r√©: ${token.substring(0, 20)}...")
                        
                        // Sauvegarder localement
                        prefs.edit().putString("fcm_token", token).apply()
                        
                        val existingId = prefs.getInt("coursier_id", -1)
                        if (existingId > 0) {
                            Log.d("MainActivity", "üöÄ Enregistrement imm√©diat pour coursier $existingId")
                            println("üöÄ Enregistrement imm√©diat pour coursier $existingId")
                            ApiService.registerDeviceToken(this, existingId, token)
                        } else {
                            Log.d("MainActivity", "‚è∏Ô∏è Token sauv√©, en attente de connexion coursier")
                            println("‚è∏Ô∏è Token sauv√©, en attente de connexion coursier")
                        }
                    } else {
                        Log.w("MainActivity", "‚ùå FCM token fetch failed: ${'$'}{task.exception?.message}")
                        println("‚ùå FCM token fetch failed: ${'$'}{task.exception?.message}")
                    }
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "registerDeviceToken startup error", e)
            }
            
            println("‚úÖ Application d√©marr√©e avec succ√®s")
            
        } catch (e: Exception) {
            println("‚ùå CRASH dans MainActivity.onCreate: ${e.message}")
            e.printStackTrace()
            
            // Reporter le crash via t√©l√©m√©trie
            TelemetrySDK.getInstance()?.reportCrash(
                throwable = e,
                screenName = "MainActivity",
                userAction = "App startup"
            )
            
            // Fallback - Interface d'erreur simple
            setContent {
                SuzoskyTheme {
                    ErrorFallbackScreen(error = e.message ?: "Erreur inconnue")
                }
            }
        }
    }
    // Callback de permission notifications (Android 13+)
    @Deprecated("Use ActivityResultContracts for permissions in new code")
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1001) {
            // V√©rifier quelles permissions ont √©t√© accord√©es
            val notificationGranted = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            val locationGranted = ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == android.content.pm.PackageManager.PERMISSION_GRANTED ||
                                 ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) == android.content.pm.PackageManager.PERMISSION_GRANTED
            
            // D√©marrer le service si les notifications sont accord√©es
            if (notificationGranted) {
                // Protection Android 14 : d√©lai avant d√©marrage
                if (android.os.Build.VERSION.SDK_INT >= 34) {
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        try { 
                            AutoUpdateService.startService(this) 
                            println("üîÑ Service d√©marr√© apr√®s permission (Android 14)")
                        } catch (e: SecurityException) {
                            println("‚ùå Service bloqu√© apr√®s permission: ${e.message}")
                        }
                    }, 2000)
                } else {
                    try { 
                        AutoUpdateService.startService(this) 
                        println("üîÑ Service d√©marr√© apr√®s permission")
                    } catch (e: SecurityException) {
                        println("‚ùå Service bloqu√© apr√®s permission: ${e.message}")
                    }
                }
            }
            
            // Informer l'utilisateur si la localisation n'est pas accord√©e
            // TODO: Show Compose snackbar for location permission result
        }
    }
}

// TODO: Replace with Compose-native UpdateDialog

@Composable
fun ErrorFallbackScreen(error: String) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.padding(16.dp)
        ) {
            Text("‚ùå Erreur d'initialisation")
            Text("D√©tails: $error")
            Text("Veuillez red√©marrer l'application")
        }
    }
}

@Composable
fun SuzoskyCoursierApp() {
    val context = LocalContext.current
    // Persist a simple login flag in SharedPreferences to stabilize navigation after login
    val prefs = remember { context.getSharedPreferences("suzosky_prefs", android.content.Context.MODE_PRIVATE) }
    
    println("üîÑ SuzoskyCoursierApp - Initialisation")
    
    // √âtat global avec vraies donn√©es
        val coursierNomState = remember { mutableStateOf(prefs.getString("coursier_nom", "Coursier") ?: "Coursier") }
        val coursierIdState = remember { mutableStateOf(prefs.getInt("coursier_id", -1).takeIf { it > 0 } ?: -1) }
        val coursierStatutState = remember { mutableStateOf("EN_LIGNE") }
        val soldeReelState = remember { mutableStateOf(0.0) }
        val commandesReellesState = remember { mutableStateOf(emptyList<Commande>()) }
        val gainsDuJourState = remember { mutableStateOf(0.0) }
        val totalCommandesState = remember { mutableStateOf(0) }
        val noteGlobaleState = remember { mutableStateOf(0.0) }
        val coursierTelephoneState = remember { mutableStateOf("") }
        val coursierEmailState = remember { mutableStateOf("") }
        val dateInscriptionState = remember { mutableStateOf("") }
        var coursierNom by coursierNomState
        var coursierId by coursierIdState
        var coursierStatut by coursierStatutState
        var soldeReel by soldeReelState
        var commandesReelles by commandesReellesState
        var gainsDuJour by gainsDuJourState
        var totalCommandes by totalCommandesState
        var noteGlobale by noteGlobaleState
        var coursierTelephone by coursierTelephoneState
        var coursierEmail by coursierEmailState
        var dateInscription by dateInscriptionState
    // Persist login UI state across recompositions/config changes + initialize from prefs
    var isLoggedIn by rememberSaveable { mutableStateOf(prefs.getBoolean("isLoggedIn", false)) }
    if (!isLoggedIn) {
        println("üîê Affichage LoginScreen")
        LoginScreen(onLoginSuccess = {
            println("‚úÖ Login r√©ussi")
            try { prefs.edit { putBoolean("isLoggedIn", true) } } catch (_: Exception) {}
            isLoggedIn = true
            // R√©cup√©rer l'ID agent r√©el c√¥t√© serveur
            ApiService.checkCoursierSession { id, err ->
                if ((id ?: 0) > 0) {
                    coursierId = id!!
                    try { prefs.edit { putInt("coursier_id", coursierId) } } catch (_: Exception) {}
                    // FORCER l'enregistrement token FCM apr√®s connexion - VERSION ROBUSTE  
                    try {
                        Log.d("MainActivity", "üî• Post-connexion: For√ßage FCM pour coursier $coursierId")
                        println("üî• Post-connexion: For√ßage FCM pour coursier $coursierId")
                        
                        // Essayer d'abord le token sauv√©
                        val savedToken = prefs.getString("fcm_token", null)
                        if (savedToken != null) {
                            Log.d("MainActivity", "üéØ Utilisation token sauv√©")
                            println("üéØ Utilisation token sauv√©")
                            ApiService.registerDeviceToken(context, coursierId, savedToken)
                        }
                        
                        // Puis r√©cup√©rer un nouveau token pour √™tre s√ªr
                        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
                            if (task.isSuccessful) {
                                val token = task.result
                                Log.d("MainActivity", "‚ú® Nouveau token post-connexion: ${token.substring(0, 20)}...")
                                println("‚ú® Nouveau token post-connexion: ${token.substring(0, 20)}...")
                                
                                prefs.edit().putString("fcm_token", token).apply()
                                ApiService.registerDeviceToken(context, coursierId, token)
                            } else {
                                Log.e("MainActivity", "‚ùå Erreur r√©cup√©ration token post-connexion")
                                println("‚ùå Erreur r√©cup√©ration token post-connexion")
                            }
                        }
                    } catch (e: Exception) {
                        Log.e("MainActivity", "üí• Exception FCM post-connexion", e)
                        println("üí• Exception FCM post-connexion: ${e.message}")
                    }
                } else {
                    println("‚ö†Ô∏è check_session a √©chou√©: ${'$'}err")
                }
            }
        })
    } else {
        println("üè† Affichage √©cran principal")

        // √âtats pour les commandes
        var loading by remember { mutableStateOf(true) }
        var error by remember { mutableStateOf<String?>(null) }

    // Paiement CinetPay int√©gr√©
    var paymentUrl by remember { mutableStateOf<String?>(null) }
    var showPaymentDialog by remember { mutableStateOf(false) }
    var pendingRechargeAmount by remember { mutableStateOf<Double?>(null) }
    var isInitiatingPayment by remember { mutableStateOf(false) }
    var isPollingBalance by remember { mutableStateOf(false) }

        // Charger les VRAIES donn√©es au login
        LaunchedEffect(isLoggedIn, coursierId) {
            if (!isLoggedIn) return@LaunchedEffect

            if (coursierId <= 0) {
                println("‚ö†Ô∏è coursierId invalide ou absent - v√©rification session c√¥t√© serveur")
                loading = true
                ApiService.checkCoursierSession { id, err ->
                    if ((id ?: 0) > 0) {
                        coursierId = id!!
                        try { prefs.edit { putInt("coursier_id", coursierId) } } catch (_: Exception) {}
                    } else {
                        loading = false
                        error = err ?: "Session invalide"
                        println("‚ö†Ô∏è Impossible de r√©cup√©rer l'ID coursier: ${'$'}err")
                    }
                }
                return@LaunchedEffect
            }

            println("üîÑ Chargement des VRAIES donn√©es depuis l'API")
            loading = true

            ApiService.getCoursierData(coursierId) { data, err ->
                if (data != null) {
                    println("‚úÖ Donn√©es r√©elles re√ßues")
                    fun toDoubleSafe(v: Any?): Double = when (v) {
                        null -> 0.0
                        is Number -> v.toDouble()
                        is String -> v.toDoubleOrNull() ?: 0.0
                        else -> 0.0
                    }
                    fun toStringSafe(v: Any?): String = when (v) {
                        null -> ""
                        is String -> v
                        else -> v.toString()
                    }
                    fun toIntFromDistanceKm(v: Any?): Int {
                        val km = toDoubleSafe(v)
                        return (km * 3.0).toInt()
                    }

                    // Charger le profil complet (nom, t√©l√©phone, stats)
                    ApiService.getCoursierProfile(coursierId) { pData, pErr ->
                        if (pData != null) {
                            val nomComplet = toStringSafe(pData["nom_complet"]).ifBlank { coursierNom }
                            if (nomComplet.isNotBlank()) {
                                coursierNom = nomComplet
                                try { prefs.edit { putString("coursier_nom", nomComplet) } } catch (_: Exception) {}
                            }
                            totalCommandes = ((pData["total_commandes"]) as? Int) ?: (toDoubleSafe(pData["total_commandes"]).toInt())
                            noteGlobale = toDoubleSafe(pData["note_globale"]).let { if (it.isFinite()) it else 0.0 }
                            coursierTelephone = toStringSafe(pData["telephone"])
                            coursierEmail = toStringSafe(pData["email"]).ifBlank { coursierEmail }
                            dateInscription = toStringSafe(pData["date_inscription"])
                        }
                    }

                    soldeReel = toDoubleSafe(data["balance"]) 
                        .let { if (it.isFinite()) it else 0.0 }
                    gainsDuJour = toDoubleSafe(data["gains_du_jour"]) 
                        .let { if (it.isFinite()) it else 0.0 }

                    // Convertir les commandes
                    @Suppress("UNCHECKED_CAST")
                    val commandesData = data["commandes"] as? List<Map<String, Any>> ?: emptyList()
                    commandesReelles = try {
                        commandesData.map { cmdMap ->
                            Commande(
                                id = toStringSafe(cmdMap["id"]),
                                clientNom = toStringSafe(cmdMap["clientNom"]),
                                clientTelephone = toStringSafe(cmdMap["clientTelephone"]),
                                adresseEnlevement = toStringSafe(cmdMap["adresseEnlevement"]),
                                adresseLivraison = toStringSafe(cmdMap["adresseLivraison"]),
                                distance = toDoubleSafe(cmdMap["distance"]).let { if (it.isFinite()) it else 0.0 },
                                tempsEstime = toIntFromDistanceKm(cmdMap["distance"]),
                                prixTotal = toDoubleSafe(cmdMap["prixLivraison"]).let { if (it.isFinite()) it else 0.0 },
                                prixLivraison = toDoubleSafe(cmdMap["prixLivraison"]).let { if (it.isFinite()) it else 0.0 },
                                // Ne pas forcer un statut test. Si vide, classer comme "inconnue" pour √©viter faux positifs.
                                statut = toStringSafe(cmdMap["statut"]).ifBlank { "inconnue" },
                                // √âviter les labels de d√©mo; utiliser les champs si pr√©sents, sinon vide
                                dateCommande = toStringSafe(cmdMap["dateCommande"]),
                                heureCommande = toStringSafe(cmdMap["heureCommande"]),
                                description = toStringSafe(cmdMap["description"]),
                                typeCommande = "Standard"
                            )
                        }
                    } catch (e: Exception) {
                        TelemetrySDK.getInstance()?.reportCrash(
                            throwable = e,
                            screenName = "MainActivity",
                            userAction = "parse_commandes",
                            additionalData = mapOf("payload_size" to commandesData.size)
                        )
                        println("‚ùå Erreur conversion commandes: ${e.message}")
                        emptyList()
                    }
                    error = null
                } else {
                    println("‚ùå Erreur chargement donn√©es: $err")
                    error = err
                }
                loading = false
            }
        }

        // Surveillance de session: d√©connexion automatique si SESSION_REVOKED uniquement
        LaunchedEffect(isLoggedIn) {
            if (isLoggedIn) {
                var consecutiveErrors = 0
                while (isLoggedIn) {
                    kotlinx.coroutines.delay(30000) // toutes les 30s (moins agressif)
                    ApiService.checkCoursierSession { id, err ->
                        if (err != null) {
                            val e = err.uppercase()
                            // Seul SESSION_REVOKED force la d√©connexion (pas NO_SESSION qui peut √™tre temporaire)
                            if (e.contains("SESSION_REVOKED")) {
                                consecutiveErrors++
                                // D√©connexion uniquement apr√®s 2 erreurs cons√©cutives pour √©viter les faux positifs
                                if (consecutiveErrors >= 2) {
                                    try { prefs.edit { putBoolean("isLoggedIn", false) } } catch (_: Exception) {}
                                    isLoggedIn = false
                                    // TODO: Show Compose snackbar for session expiration
                                }
                            } else {
                                // Erreur temporaire, on ignore
                                consecutiveErrors = maxOf(0, consecutiveErrors - 1)
                            }
                        } else {
                            // Succ√®s, reset du compteur d'erreurs
                            consecutiveErrors = 0
                        }
                    }
                }
            }
        }

        Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues ->
            Box(modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
            ) {
                when {
                    loading -> {
                        println("‚è≥ √âtat loading")
                        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            CircularProgressIndicator()
                        }
                    }
                    error != null -> {
                        println("‚ùå √âtat erreur: $error")
                        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            Text("Erreur: $error")
                        }
                    }
                    else -> {
                        println("‚úÖ Affichage CoursierScreenNew avec VRAIES donn√©es")
                        // VRAIES DONN√âES de l'API
                        CoursierScreenNew(
                            modifier = Modifier.fillMaxSize(),
                            coursierId = coursierId,
                            coursierNom = coursierNom,
                            coursierStatut = coursierStatut,
                            totalCommandes = totalCommandes,
                            noteGlobale = noteGlobale,
                            coursierTelephone = coursierTelephone,
                            coursierEmail = coursierEmail,
                            dateInscription = dateInscription,
                            commandes = commandesReelles, // VRAIES commandes de l'API
                            balance = soldeReel.toInt(), // VRAI solde de l'API
                            gainsDuJour = gainsDuJour.toInt(), // VRAIS gains de l'API
                            onStatutChange = { nouveauStatut -> coursierStatut = nouveauStatut },
                            onCommandeAccept = {
                                try { OrderRingService.stop(context) } catch (_: Exception) {}
                                // TODO: Accept logic (API update)
                            },
                            onCommandeReject = {
                                try { OrderRingService.stop(context) } catch (_: Exception) {}
                                // TODO: Reject logic (API update)
                            },
                            onCommandeAttente = { /* TODO: Waiting logic */ },
                            onNavigateToProfile = { /* TODO: Navigation */ },
                            onNavigateToHistorique = { /* TODO: Navigation */ },
                            onNavigateToGains = { /* TODO: Navigation */ },

                            onLogout = {
                                deactivateFcmTokenOnServer(context)
                                try { prefs.edit { putBoolean("isLoggedIn", false) } } catch (_: Exception) {}
                                isLoggedIn = false
                            },
                            // Ouvrir le paiement via Custom Tab et surveiller la confirmation
                            onRecharge = { amount ->
                                if (amount > 0) {
                                    pendingRechargeAmount = amount.toDouble()
                                    isInitiatingPayment = true
                                    ApiService.initRecharge(coursierId, amount.toDouble()) { url, error ->
                                        isInitiatingPayment = false
                                        if (url != null) {
                                            paymentUrl = url
                                            showPaymentDialog = true
                                        } else {
                                            // TODO: Show Compose snackbar for payment error
                                        }
                                    }
                                } else {
                                    // TODO: Show Compose snackbar for invalid amount
                                }
                            }
                        )
                        if (isInitiatingPayment) {
                            PaymentStatusDialog(
                                title = "Initialisation du paiement",
                                message = "Connexion s√©curis√©e √† CinetPay‚Ä¶",
                                cancellable = false
                            )
                        }

                        if (isPollingBalance) {
                            PaymentStatusDialog(
                                title = "Validation du paiement",
                                message = "Nous v√©rifions la confirmation et mettons √† jour votre solde‚Ä¶",
                                cancellable = false
                            )
                        }

                        if (showPaymentDialog && paymentUrl != null) {
                            val initialBalanceSnapshot = soldeReel
                            PaymentWebViewDialog(
                                url = paymentUrl!!,
                                amount = pendingRechargeAmount,
                                onDismiss = {
                                    showPaymentDialog = false
                                    paymentUrl = null
                                },
                                onCompleted = { success, transactionId ->
                                    showPaymentDialog = false
                                    paymentUrl = null
                                    pendingRechargeAmount = null
                                    if (success) {
                                        isPollingBalance = true
                                        ApiService.pollBalanceUntilChange(
                                            coursierId = coursierId,
                                            initialBalance = initialBalanceSnapshot,
                                            onResult = { newBalance, updated ->
                                                isPollingBalance = false
                                                if (updated && newBalance != null) {
                                                    soldeReel = newBalance
                                                    // TODO: Show Compose snackbar for recharge success
                                                } else {
                                                    // TODO: Show Compose snackbar for payment info
                                                }
                                            }
                                        )
                                    } else {
                                        // TODO: Show Compose snackbar for recharge not confirmed
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }
    }
}

